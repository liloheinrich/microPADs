import cv2
import numpy
import math
from enum import Enum
import numpy as np
import os.path
import sys

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.hsv_threshold_hue = [0.0, 255.0]
        self.hsv_threshold_saturation = [50.0, 255.0]
        self.hsv_threshold_value = [85.0, 255.0]
        self.hsv_threshold_output = None

        self.mask_mask = self.hsv_threshold_output
        self.mask_output = None

        self.find_contours_input = self.hsv_threshold_output
        self.find_contours_external_only = False
        self.find_contours_output = None

        self.filter_contours_contours = self.find_contours_output
        self.filter_contours_min_area = 100.0
        self.filter_contours_min_perimeter = 100.0
        self.filter_contours_min_width = 0
        self.filter_contours_max_width = 1000
        self.filter_contours_min_height = 0
        self.filter_contours_max_height = 1000
        self.filter_contours_solidity = [0, 100]
        self.filter_contours_max_vertices = 1000000
        self.filter_contours_min_vertices = 0
        self.filter_contours_min_ratio = 0
        self.filter_contours_max_ratio = 1000
        self.filter_contours_output = None

    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSV_Threshold0:
        self.hsv_threshold_input = source0
        self.hsv_threshold_output = self.hsv_threshold(self.hsv_threshold_input, self.hsv_threshold_hue, self.hsv_threshold_saturation, self.hsv_threshold_value)

        # Step Mask0:
        self.mask_input = source0
        self.mask_mask = self.hsv_threshold_output
        (self.mask_output) = self.mask(self.mask_input, self.mask_mask)

        # Step Find_Contours0:
        self.find_contours_input = self.hsv_threshold_output
        self.find_contours_output = self.find_contours(self.find_contours_input, self.find_contours_external_only)

        # Step Filter_Contours0:
        self.filter_contours_contours = self.find_contours_output
        (self.filter_contours_output) = self.filter_contours(self.filter_contours_contours, self.filter_contours_min_area, self.filter_contours_min_perimeter, self.filter_contours_min_width, self.filter_contours_max_width, self.filter_contours_min_height, self.filter_contours_max_height, self.filter_contours_solidity, self.filter_contours_max_vertices, self.filter_contours_min_vertices, self.filter_contours_min_ratio, self.filter_contours_max_ratio)


    @staticmethod
    def hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

    @staticmethod
    def mask(input, mask):
        """Filter out an area of an image using a binary mask.
        Args:
            input: A three channel numpy.ndarray.
            mask: A black and white numpy.ndarray.
        Returns:
            A three channel numpy.ndarray.
        """
        return cv2.bitwise_and(input, input, mask=mask)

    @staticmethod
    def find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        contours, heirarchy =cv2.findContours(input, mode=mode, method=method)
        return contours

    @staticmethod
    def filter_contours(input_contours, min_area, min_perimeter, min_width, max_width,
                        min_height, max_height, solidity, max_vertex_count, min_vertex_count,
                        min_ratio, max_ratio):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:
            x,y,w,h = cv2.boundingRect(contour)
            if (w < min_width or w > max_width):
                continue
            if (h < min_height or h > max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            solid = 100 * area / cv2.contourArea(hull)
            if (solid < solidity[0] or solid > solidity[1]):
                continue
            if (len(contour) < min_vertex_count or len(contour) > max_vertex_count):
                continue
            ratio = (float)(w) / h
            if (ratio < min_ratio or ratio > max_ratio):
                continue
            output.append(contour)
        return output

def main():
	if len(sys.argv) != 2:
	    print("wrong amount of arguments. specify one image filename")
	    return

	filename = sys.argv[1]
	#filename = 'IMG_8914.jpg'
	print(filename)
	lf = len(filename)
	if (not os.path.isfile(filename)) or (filename[lf-4:lf] != ".jpg"):
	    print("filename invalid")
	    return

	img = cv2.imread(filename)
	cv2.namedWindow('image', cv2.WINDOW_NORMAL)
	cv2.imshow('image',img)


	p = GripPipeline()
	p.process(img)
	cv2.namedWindow('image2', cv2.WINDOW_NORMAL)
	cv2.imshow('image2',p.hsv_threshold_output)


	print("len(p.filter_contours_output)", len(p.filter_contours_output))
	img3 = img.copy()
	cv2.drawContours(img3, p.filter_contours_output, -1, (0, 255, 0), 15)
	cv2.namedWindow('image3', cv2.WINDOW_NORMAL)
	cv2.imshow('image3',img3)


	# (x, y), radius = cv2.minEnclosingCircle(p.filter_contours_output[0])
	# center = (int(x), int(y))
	# radius = int(radius)
	# #print(center, radius)
	# img4 = img.copy()
	# cv2.circle(img4, center, radius, (255, 0, 0), 15)
	# cv2.namedWindow('image4', cv2.WINDOW_NORMAL)
	# cv2.imshow('image4',img4)


	ellipse = cv2.fitEllipse(p.filter_contours_output[0])
	#print(ellipse)
	img5 = img.copy()
	cv2.ellipse(img5,ellipse,(0,0,255),15)
	cv2.namedWindow('image5', cv2.WINDOW_NORMAL)
	cv2.imshow('image5',img5)


	cv2.namedWindow('image6', cv2.WINDOW_NORMAL)
	cv2.imshow('image6',p.mask_output)
	output = cv2.findNonZero(p.mask_mask)
	#print(len(output))
	img8 = img.copy()
	hsv = cv2.cvtColor(img8, cv2.COLOR_BGR2HSV)
	hue_vals = []
	count = 0;
	for i in output:
	    #if count % 3000 == 0:
	    #    print(i[0], hsv[i[0][1], i[0][0]])
	    count += 1
	    hue_vals.append(hsv[i[0][1], i[0][0], 0])
	print(len(hue_vals))
	print("np.mean(hue_vals)", np.mean(hue_vals))


	cv2.waitKey(0)
	cv2.destroyAllWindows()

main()
