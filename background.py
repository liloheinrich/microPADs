import cv2
import numpy as np
import math
from enum import Enum

class BackgroundPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.normalize_type = cv2.NORM_MINMAX
        self.normalize_alpha = 0.0
        self.normalize_beta = 255.0

        self.normalize_output = None

        self.hsv_threshold_input = self.normalize_output
        self.hsv_threshold_hue = [0.0, 180.0]
        self.hsv_threshold_saturation = [0.0, 83.98981324278438]
        self.hsv_threshold_value = [201.58695077836035, 255.0]

        self.hsv_threshold_output = None


        self.mask_mask = self.hsv_threshold_output

        self.mask_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Normalize0:
        self.normalize_input = source0
        (self.normalize_output) = self.normalize(self.normalize_input, self.normalize_type, self.normalize_alpha, self.normalize_beta)

        # Step HSV_Threshold0:
        self.hsv_threshold_input = self.normalize_output
        (self.hsv_threshold_output) = self.hsv_threshold(self.hsv_threshold_input, self.hsv_threshold_hue, self.hsv_threshold_saturation, self.hsv_threshold_value)

        # Step Mask0:
        self.mask_input = source0
        self.mask_mask = self.hsv_threshold_output
        (self.mask_output) = self.mask(self.mask_input, self.mask_mask)


    @staticmethod
    def normalize(input, type, a, b):
        """Normalizes or remaps the values of pixels in an image.
        Args:
            input: A numpy.ndarray.
            type: Opencv enum.
            a: The minimum value.
            b: The maximum value.
        Returns:
            A numpy.ndarray of the same type as the input.
        """
        return cv2.normalize(input, None, a, b, type)

    @staticmethod
    def hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

    @staticmethod
    def mask(input, mask):
        """Filter out an area of an image using a binary mask.
        Args:
            input: A three channel numpy.ndarray.
            mask: A black and white numpy.ndarray.
        Returns:
            A three channel numpy.ndarray.
        """
        return cv2.bitwise_and(input, input, mask=mask)

def get_background_color(source):
    img = source.copy()
    p = BackgroundPipeline()
    p.process(img)

    # get average bgr of the white paper background for calibration purposes
    float_bgr = list(cv2.mean(p.mask_output[:,:,:], p.mask_mask)[0:3])
    bgr_background = [round(x) for x in float_bgr]

    # get average hsv as well
    hsv_mat = cv2.cvtColor(np.uint8([[bgr_background]]), cv2.COLOR_BGR2HSV)
    hsv_background = hsv_mat[0][0]

    return p, np.array(bgr_background).astype(int), np.array(hsv_background).astype(int)